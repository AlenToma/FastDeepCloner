<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FastDeepCloner</name>
    </assembly>
    <members>
        <member name="T:FastDeepCloner.CloneLevel">
            <summary>
            CloneLevel
            </summary>
        </member>
        <member name="T:FastDeepCloner.DeepCloner">
            <summary>
            DeepCloner
            </summary>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.CleanCachedItems">
            <summary>
            Clear cached data
            </summary>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.Clone``1(``0,FastDeepCloner.FastDeepClonerSettings)">
            <summary>
            
            </summary>
            <param name="objectToBeCloned">Desire object to cloned</param>
            <param name="settings"></param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.Clone(System.Object,FastDeepCloner.FieldType)">
            <summary>
            DeepClone object
            </summary>
            <param name="objectToBeCloned">Desire object to cloned</param>
            <param name="fieldType">Clone Method</param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.Clone``1(``0,FastDeepCloner.FieldType)">
            <summary>
            DeepClone object
            </summary>
            <param name="objectToBeCloned">Desire object to cloned</param>
            <param name="fieldType">Clone Method</param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.CloneDynamic(System.Object)">
            <summary>
            DeepClone dynamic(AnonymousType) object
            </summary>
            <param name="objectToBeCloned">Desire AnonymousType object</param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.CreateInstance``1">
            <summary>
            Create CreateInstance()
            this will use ILGenerator to create new object from the cached ILGenerator
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.CreateInstance(System.Type)">
            <summary>
            Create CreateInstance()
            this will use ILGenerator to create new object from the cached ILGenerator
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.GetFastDeepClonerFields(System.Type)">
            <summary>
            will return fieldInfo from the cached fieldinfo. Get and set value is much faster.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.GetFastDeepClonerProperties(System.Type)">
            <summary>
            will return propertyInfo from the cached propertyInfo. Get and set value is much faster.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.GetField(System.Type,System.String)">
            <summary>
            Get fild by Name
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.DeepCloner.GetProperty(System.Type,System.String)">
            <summary>
            Get Property by name
            </summary>
            <param name="type"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:FastDeepCloner.Extensions">
            <summary>
            FastDeepCloner Extensions
            </summary>
        </member>
        <member name="T:FastDeepCloner.Extensions.CreateInstance">
            <summary>
            Override create instance default is emit
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.Extensions.IsInternalObject(System.Object)">
            <summary>
            Determines if the specified type is an internal type.
            </summary>
            <param name="underlyingSystemType"></param>
            <param name="o"></param>
            <returns><c>true</c> if type is internal, else <c>false</c>.</returns>
        </member>
        <member name="M:FastDeepCloner.Extensions.IsAnonymousType(System.Type)">
            <summary>
            Validate if type is AnonymousType
            This is the very basic validation
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.Extensions.IsInternalType(System.Type)">
            <summary>
            Determines if the specified type is an Class type.
            </summary>
            <param name="underlyingSystemType"></param>
            <returns><c>true</c> if type is internal, else <c>false</c>.</returns>
        </member>
        <member name="T:FastDeepCloner.FastDeepClonerIgnore">
            <summary>
            Ignore Properties or Field that containe this attribute
            </summary>
        </member>
        <member name="T:FastDeepCloner.FastDeepClonerSettings">
            <summary>
            FastDeepClonerSettings
            </summary>
        </member>
        <member name="P:FastDeepCloner.FastDeepClonerSettings.FieldType">
            <summary>
            Field type
            </summary>
        </member>
        <member name="P:FastDeepCloner.FastDeepClonerSettings.CloneLevel">
            <summary>
             Clone Level
            </summary>
        </member>
        <member name="P:FastDeepCloner.FastDeepClonerSettings.OnCreateInstance">
            <summary>
            override Activator CreateInstance and use your own method
            </summary>
        </member>
        <member name="M:FastDeepCloner.FastDeepClonerSettings.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="T:FastDeepCloner.FieldType">
            <summary>
            PropertyField for property
            FielInfo for property
            </summary>
        </member>
        <member name="T:FastDeepCloner.IFastDeepClonerProperty">
            <summary>
            Interface for FastDeepClonerProperty
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.GetMethod">
            <summary>
            Get Method for GetValue()
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.SetMethod">
            <summary>
            Set Method for SetValue()
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.Name">
            <summary>
            PropertyName
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.FullName">
            <summary>
            Property FullName
            </summary>
        </member>
        <member name="M:FastDeepCloner.IFastDeepClonerProperty.SetValue(System.Object,System.Object)">
            <summary>
            Set Value
            </summary>
            <param name="o"></param>
            <param name="value"></param>
        </member>
        <member name="M:FastDeepCloner.IFastDeepClonerProperty.GetValue(System.Object)">
            <summary>
            Get Value
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.CanRead">
            <summary>
            CanRead= !(field.IsInitOnly || field.FieldType == typeof(IntPtr) || field.IsLiteral);
            or 
            CanRead= !(!property.CanWrite || !property.CanRead || property.PropertyType == typeof(IntPtr) || property.GetIndexParameters().Length > 0);
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.FastDeepClonerIgnore">
            <summary>
            Ignored
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.Attributes">
            <summary>
            All available attributes
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.PropertyType">
            <summary>
            Type
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.IsVirtual">
            <summary>
            IsVirtual
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.IsInternalType">
            <summary>
            Is a reference type eg not GetTypeInfo().IsClass
            </summary>
        </member>
        <member name="M:FastDeepCloner.IFastDeepClonerProperty.ContainAttribute``1">
            <summary>
            Validate if attribute exist
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.IFastDeepClonerProperty.ContainAttribute(System.Type)">
            <summary>
            Validate if attribute type exist
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.IFastDeepClonerProperty.GetCustomAttribute``1">
            <summary>
            Get first found attribute
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:FastDeepCloner.IFastDeepClonerProperty.GetCustomAttribute(System.Type)">
            <summary>
            Get first found attribute type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.PropertyGetValue">
            <summary>
            Exist only for PropertyInfo
            </summary>
        </member>
        <member name="P:FastDeepCloner.IFastDeepClonerProperty.PropertySetValue">
            <summary>
            Exist only for PropertyInfo
            </summary>
        </member>
    </members>
</doc>
